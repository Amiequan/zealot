ruby:
  releases = @release.channel.recently_releases

- if releases.size > 0
  .card
    .card-header
      h3.card-title
        i.icon.fas.fa-history
        = t('releases.show.last_ten_uploads')
      .card-tools
        button.btn.btn-tool data-card-widget="collapse"
          i.fas.fa-minus
    .card-body.pb-0
      .timeline
        - releases.each do |release|
          div
            i.fa-circle class="#{@release == release ? 'fas' : 'far'}"
            .timeline-item
              span.time
                i.icon.fas.fa-clock
                = time_ago_in_words(release.created_at)
              h3.timeline-header
                = link_to release.app_name, friendly_channel_release_path(release.channel, release), class: 'pr-1'
                = t('releases.show.upload_release', release_version: release.release_version, build_version: release.build_version)
              - if release.changelog.present?
                .timeline-body.pb-0
                  = changelog_format(release.text_changelog, class: 'mb-0')
              - if release.release_type.present? || release.branch.present? || release.short_git_commit.present?
                .timeline-footer
                  - if release.device_type
                    small.badge
                      = device_name(release.device_type)
                  - if release.release_type.present?
                    small.badge
                      = release.release_type
                  - if release.branch.present?
                    small.badge
                      = release.branch
                  - if release.short_git_commit.present?
                    small.badge
                      - if release.channel.git_url.present?
                        = git_commit_url(@release.channel.git_url, @release.git_commit)
                      - else
                        = release.short_git_commit
        div
          i.fas.fa-clock.bg-gray
    .card-footbar
      a.btn.btn-default.btn-block href="#{friendly_channel_path(@release.channel)}" = t('releases.show.more')